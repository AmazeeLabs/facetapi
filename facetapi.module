<?php

/**
 * @file
 * An abstracted facet API that can be used by various search backends.
 */

/**
 * Constant for the "AND" operator.
 */
define('FACETAPI_OPERATOR_AND', 'and');

/**
 * Constant for the "OR" operator.
 */
define('FACETAPI_OPERATOR_OR', 'or');

/**
 * String that represents a time gap of a year between two dates.
 */
define('FACETAPI_DATE_YEAR', 'YEAR');

/**
 * String that represents a time gap of a month between two dates.
 */
define('FACETAPI_DATE_MONTH', 'MONTH');

/**
 * String that represents a time gap of a day between two dates.
 */
define('FACETAPI_DATE_DAY', 'DAY');

/**
 * String that represents a time gap of an hour between two dates.
 */
define('FACETAPI_DATE_HOUR', 'HOUR');

/**
 * String that represents a time gap of a minute between two dates.
 */
define('FACETAPI_DATE_MINUTE', 'MINUTE');

/**
 * String that represents a time gap of a second between two dates.
 */
define('FACETAPI_DATE_SECOND', 'SECOND');

/**
 * Date string for ISO 8601 date formats.
 */
define('FACETAPI_DATE_ISO8601', 'Y-m-d\TH:i:s\Z');

/**
 * Regex pattern for range queries.
 */
define('FACETAPI_REGEX_RANGE', '/^[\[\{](\S+) TO (\S+)[\]\}]$/');

/**
 * Regex pattern for date queries.
 */
define('FACETAPI_REGEX_DATE', '/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})Z$/');

/**
 * Regex pattern for date ranges.
 */
define('FACETAPI_REGEX_DATE_RANGE', '/^\[(' . trim(FACETAPI_REGEX_DATE, '/^$') . ') TO (' . trim(FACETAPI_REGEX_DATE, '/^$') . ')\]$/');

// Loads file containing various callback functions.
// @todo Can we lazy-load this file somehow?
// @todo It all comes back to the listener/indexer conversation.
require_once dirname(__FILE__) . '/facetapi.callbacks.inc';

/**
 * Implements hook_menu().
 */
function facetapi_menu() {
  $items = array();

  // Builds the realm settings forms for each searcher.
  foreach (facetapi_get_searcher_info() as $searcher => $searcher_info) {
    // Only build router items automatically if a path is provided.
    if (empty($searcher_info['path'])) {
      continue;
    }

    $first = TRUE;
    foreach (facetapi_get_realm_info() as $realm_name => $realm) {
      if ($first) {
        $first = FALSE;

        $items[$searcher_info['path'] . '/facets'] = array(
          'title' => 'Facets',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('facetapi_realm_settings_form', $searcher, $realm_name),
          'access arguments' => array('administer search'),
          'type' => MENU_LOCAL_TASK,
          'file' => 'facetapi.admin.inc',
        );
        $items[$searcher_info['path'] . '/facets/' . $realm_name] = array(
          'title' => $realm['label'],
          'type' => MENU_DEFAULT_LOCAL_TASK,
          'weight' => $realm['weight'],
        );
      }
      else {
        $items[$searcher_info['path'] . '/facets/' . $realm_name] = array(
          'title' => $realm['label'],
          'page callback' => 'drupal_get_form',
          'page arguments' => array('facetapi_realm_settings_form', $searcher, $realm_name),
          'access arguments' => array('administer search'),
          'type' => MENU_LOCAL_TASK,
          'file' => 'facetapi.admin.inc',
        );
      }
    }
  }

  $items['admin/config/search/facetapi/%facetapi_adapter/%facetapi_realm/%facetapi_facet/edit'] = array(
    'title' => 'Configure facet display',
    'load arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('facetapi_facet_settings_form', 4, 5, 6),
    'access arguments' => array('administer search'),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => -10,
    'file' => 'facetapi.admin.inc',
  );

  $items['admin/config/search/facetapi/%facetapi_adapter/%facetapi_realm/%facetapi_dependencies/dependencies'] = array(
    'title' => 'Configure facet dependencies',
    'load arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('facetapi_facet_dependencies_form', 4, 5, 6),
    'access arguments' => array('administer search'),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => -5,
    'file' => 'facetapi.admin.inc',
  );

  $items['admin/config/search/facetapi/%facetapi_adapter/%facetapi_realm/%facetapi_facet/export'] = array(
    'title' => 'Export facet configuration',
    'load arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('facetapi_export_form', 4, 5, 6),
    'access arguments' => array('administer search'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'facetapi.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function facetapi_ctools_plugin_type() {
  return array(
    'adapters' => array(
      'use hooks' => TRUE,
    ),
    'dependencies' => array(
      'use hooks' => TRUE,
    ),
    'empty_behaviors' => array(
      'use hooks' => TRUE,
    ),
    'query_types' => array(
      'use hooks' => TRUE,
    ),
    'widgets' => array(
      'use hooks' => TRUE,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function facetapi_theme() {
  return array(
    'facetapi_title' => array(
      'arguments' => array('title' => NULL),
      'file' => 'facetapi.theme.inc',
    ),
    'facetapi_facet_missing' => array(
      'arguments' => array('field_name' => NULL),
      'file' => 'facetapi.theme.inc',
    ),
    'facetapi_count' => array(
      'arguments' => array('count' => NULL),
      'file' => 'facetapi.theme.inc',
    ),
    'facetapi_link_inactive' => array(
      'arguments' => array('text' => NULL, 'path' => NULL, 'options' => array(), 'count' => 0),
      'file' => 'facetapi.theme.inc',
    ),
    'facetapi_link_active' => array(
      'arguments' => array('text' => NULL, 'path' => NULL, 'options' => array()),
      'file' => 'facetapi.theme.inc',
    ),
    'facetapi_realm_settings_table' => array(
      'render element' => 'element',
      'file' => 'facetapi.admin.inc',
    ),
    'facetapi_sort_settings_table' => array(
      'render element' => 'element',
      'file' => 'facetapi.admin.inc',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function facetapi_block_info() {
  module_load_include('inc', 'facetapi', 'facetapi.block');
  return facetapi_get_block_info();
}

/**
 * Implements hook_block_view().
 */
function facetapi_block_view($delta = '') {
  module_load_include('inc', 'facetapi', 'facetapi.block');
  return facetapi_get_block($delta);
}

////
////
//// facetapi_*_load() functions
////
////

/**
 * Loads an instantiated adapter plugin associated with the searcher.
 *
 * @param $searcher
 *   The machine readable name of searcher.
 *
 * @return FacetapiAdapter
 *   The adapter object, FALSE if not available.
 */
function facetapi_adapter_load($searcher) {
  $adapters = &drupal_static(__FUNCTION__, array());
  if (!isset($adapters[$searcher])) {
    $searcher_info = facetapi_get_searcher_info();
    if (isset($searcher_info[$searcher]['adapter'])) {
      // Loads plugin class.
      ctools_include('plugins');
      $id = $searcher_info[$searcher]['adapter'];
      $class = ctools_plugin_load_class('facetapi', 'adapters', $id, 'handler');
      // Instantiates adapter, sets "params" if class was instantiated.
      $adapters[$searcher] = ($class) ? new $class($searcher_info[$searcher]) : FALSE;
      if ($adapters[$searcher]) {
        $adapters[$searcher]->setParams($_GET);
      }
    }
    else {
      $adapters[$searcher] = FALSE;
    }
  }
  return $adapters[$searcher];
}

/**
 * Loads the dependency plugins associated with the facet.
 *
 * @param $facet_name
 *   A string containing the machine readable name of the facet.
 * @param $searcher
 *   A string containing the machine readable name of the searcher module.
 *
 * @return
 *   An array of instantiated dependency plugins, FALSE if the facet is not
 *   valid or the facet has no dependency plugins associated with it.
 */
function facetapi_dependencies_load($facet_name, $searcher) {
  $dependencies = array();
  $facet = facetapi_facet_load($facet_name, $searcher);
  if ($facet && ($adapter = facetapi_adapter_load($searcher))) {
    foreach ($facet['dependency plugins'] as $id) {
      // NOTE: CTools plugin component is loaded by facetapi_adapter_load().
      $class = ctools_plugin_load_class('facetapi', 'dependencies', $id, 'handler');
      $settings = $adapter->getFacet($facet)->getSettings();
      $dependencies[] = new $class($id, $adapter, $facet, $settings);
    }
  }
  return ($dependencies) ? $dependencies : FALSE;
}

/**
 * Returns a realm definition.
 *
 * @param $realm_name
 *   A string containing the machine readable name of the realm.
 *
 * @return
 *   An array containing the realm definition, FALSE if $realm_name is not
 *   valid.
 */
function facetapi_realm_load($realm_name) {
  $realm_info = facetapi_get_realm_info();
  return (isset($realm_info[$realm_name])) ? $realm_info[$realm_name] : FALSE;
}

/**
 * Loads a facet definition.
 *
 * NOTE: Facets aren't statically cached by this function, so avoid situations
 * where this needs to be called repeatedly. Use facetapi_enabled_facets_get()
 * as an alternative.
 *
 * @param $facet_name
 *   A string containing the machine readable name of the facet.
 * @param $searcher
 *   A string containing the machine readable name of the searcher module.
 *
 * @return
 *   An array containing the facet definition, FALSE if $facet_name or $searcher
 *   is not valid.
 */
function facetapi_facet_load($facet_name, $searcher) {
  $facet_info = facetapi_get_facet_info($searcher);
  return (isset($facet_info[$facet_name])) ? $facet_info[$facet_name] : FALSE;
}

////
////
//// facetapi_get_*() functions
////
////

/**
 * Returns array of searcher information.
 */
function facetapi_get_searcher_info() {
  $searcher_info = module_invoke_all('facetapi_searcher_info');
  foreach ($searcher_info as $searcher => $info) {
    // @see http://drupal.org/node/1167974
    // Converts "type" to an array and stores in "types".
    if (isset($info['type']) && !isset($info['types'])) {
      $info = array($info['type']);
    }

    $info += array(
      'name' => $searcher,
      'types' => array('node'),
      'supports facet missing' => FALSE,
      'supports facet mincount' => FALSE,
    );

    // @see http://drupal.org/node/1167974
    // Makes sure old style "type" is present.
    if (!isset($info['type'])) {
      $info['type'] = $info['types'][key($info['types'])];
    }

    // Maps "types" so we can do faster lookups via isset().
    $info['types'] = drupal_map_assoc($info['types']);
    $searcher_info[$searcher] = $info;
  }

  drupal_alter('facetapi_searcher_info', $searcher_info);
  return $searcher_info;
}

/**
 * Returns realm definitions.
 *
 * @return
 *   An array of realm definitions.
 */
function facetapi_get_realm_info() {
  $realm_info = &drupal_static(__FUNCTION__);
  if (NULL === $realm_info) {
    $realm_info = module_invoke_all('facetapi_realm_info');
    foreach ($realm_info as $realm_name => $realm) {
      $realm_info[$realm_name] += array(
        'name' => $realm_name,
        'label' => $realm_name,
        'description' => '',
        'default widget' => '',
        'settings callback' => FALSE,
        'element type' => 'links',
        'sortable' => TRUE,
      );
    }
    drupal_alter('facetapi_realm_info', $realm_info);
    uasort($realm_info, 'drupal_sort_weight');
  }
  return $realm_info;
}

/**
 * Returns all defined facets for a searcher.
 *
 * @param $searcher
 *   A string containing the machine readable name of the searcher.
 *
 * @return
 *   An array containing the facet arrays, FALSE on errors.
 */
function facetapi_get_facet_info($searcher) {
  $facet_info = &drupal_static(__FUNCTION__, array());

  // Gets facet info if we haven't gotten it already.
  if (!isset($facet_info[$searcher])) {
    $searcher_info = facetapi_get_searcher_info();
    $facet_info[$searcher] = array();

    // Invokes hook_facetapi_facet_info(), normalizes facets.
    foreach (module_implements('facetapi_facet_info') as $module) {
      $facets = call_user_func($module . '_facetapi_facet_info', $searcher_info[$searcher]);
      if (!$facets || !is_array($facets)) {
        $facets = array();
      }

      // Iterates over facet definitions, merges defaults.
      foreach($facets as $facet_name => $info) {
        $facet_info[$searcher][$facet_name] = $info;
        $facet_info[$searcher][$facet_name] += array(
          'name' => $facet_name,
          'label' => $facet_name,
          'description' => '',
          'field' => $facet_name,
          'field alias' => isset($info['field']) ? $info['field'] : $facet_name,
          'field api name' => FALSE,
          'query type' => 'term',
          'dependency plugins' => array(),
          'default widget' => FALSE,
          'allowed operators' => array(FACETAPI_OPERATOR_AND => TRUE, FACETAPI_OPERATOR_OR => TRUE),
          'facet missing allowed' => FALSE,
          'facet mincount allowed' => FALSE,
          'weight' => 0,
          'map callback' => FALSE,
          'map options' => array(),
          'hierarchy callback' => FALSE,
          'values callback' => FALSE,
          'min callback' => FALSE,
          'max callback' => FALSE,
          'default sorts' => array(
            array('active', SORT_DESC),
            array('count', SORT_DESC),
            array('display', SORT_ASC),
          ),
        );
      }
    }

    // Invokes alter hook, sorts and returns.
    drupal_alter('facetapi_facet_info', $facet_info[$searcher], $searcher_info[$searcher]);
    uasort($facet_info[$searcher], 'drupal_sort_weight');
  }

  return $facet_info[$searcher];
}

/**
 * Returns all defined sorts.
 *
 * @return
 *   An associative array of sort definitions keyed by sort name.
 */
function facetapi_get_sort_info() {
  $sort_info = &drupal_static(__FUNCTION__);
  if (NULL === $sort_info) {
    $sort_info = module_invoke_all('facetapi_sort_info');
    foreach ($sort_info as $sort_name => $info) {
      $sort_info[$sort_name] += array(
        'name' => $sort_name,
        'title' => $sort_name,
        'callback' => '',
        'description' => '',
        'weight' => 0,
      );
    }
    drupal_alter('facetapi_sort_info', $sort_info);
  }
  return $sort_info;
}

/**
 * Loads settings from the database.
 *
 * @param $searcher
 *   The machine readable name of the searcher.
 * @param $realm_name
 *   The machine readable name of the realm, pass NULL to return all facets
 *   that are enabled in at least one realm.
 *
 * @return array
 *   Facet definitions for enabled facets.
 */
function facetapi_get_enabled_facets($searcher, $realm_name = NULL) {
  $enabled_facets = &drupal_static(__FUNCTION__, array());
  $cid = $searcher . ':' . (string) $realm_name;
  if (!isset($enabled_facets[$cid])) {
    // Builds array of aruments to pass to ctools_export_load_object().
    $args = array('searcher' => $searcher,  'enabled' => 1);
    if (NULL !== $realm_name) {
      $args['realm'] = $realm_name;
    }

    // Loads settings for enabled facets.
    ctools_include('export');
    $results = ctools_export_load_object('facetapi', 'conditions', $args);

    // Builds an array keyed by the names of enabled facets.
    $facets = array();
    foreach ($results as $result) {
      $facets[$result->facet] = $result->facet;
    }

    // Gets facet definitions for all enabled facets.
    $facet_info = facetapi_get_facet_info($searcher);
    $enabled_facets[$cid] = array_intersect_key($facet_info, $facets);
  }
  return $enabled_facets[$cid];
}

////
////
//// Facet API hook implementations
////
////

/**
 * Implements hook_facetapi_realm_info().
 */
function facetapi_facetapi_realm_info() {
  $realms = array();

  $realms['block'] = array(
    'label' => t('Blocks'),
    'weight' => -10,
    'sortable' => FALSE,
    'default widget' => 'facetapi_links',
    'element type' => 'links',
    'description' => t(
      'The <em>Blocks</em> realm displays each facet in a separate <a href="@block-page">block</a>. Users are able to refine their searches in a drill-down fashion.',
      array('@block-page' => url('admin/structure/block', array('query' => array('destination' => $_GET['q']))))
    ),
  );

  /*
  // @todo - implement this. http://drupal.org/node/1132744
  $realms['fieldset'] = array(
    'label' => t('Fieldset'),
    'weight' => -5,
    'default widget' => 'facetapi_textfield',
    'element type' => 'form elements',
    'description' => t('The <em>Fieldset</em> realm displays facets as form elements in a fieldset below the search form that is similar in appearance to the core Search module\'s <em>Advanced search</em> fieldset.'),
  );
  */

  return $realms;
}

/**
 * Implements hook_facetapi_facet_info().
 */
function facetapi_facetapi_facet_info($searcher_info) {
  $facets = array();
  if (isset($searcher_info['types']['node'])) {

    $facets['bundle'] = array(
      'label' => t('Content type'),
      'description' => t('Filter by content type.'),
      'map callback' => 'facetapi_map_bundle',
      'values callback' => 'facetapi_callback_type_values',
      'facet mincount allowed' => TRUE,
      'dependency plugins' => array('role'),
    );

    $facets['author'] = array(
      'label' => t('Author'),
      'description' => t('Filter by author.'),
      'field' => 'uid',
      'map callback' => 'facetapi_map_author',
      'values callback' => 'facetapi_callback_user_values',
      'facet mincount allowed' => TRUE,
      'dependency plugins' => array('bundle', 'role'),
    );

    $facets['language'] = array(
      'label' => t('Language'),
      'description' => t('Filter by language.'),
      'field' => 'language',
      'map callback' => 'facetapi_map_language',
      'values callback' => 'facetapi_callback_language_values',
      'facet mincount allowed' => TRUE,
      'dependency plugins' => array('bundle', 'role'),
    );

    $facets['created'] = array(
      'label' => t('Post date'),
      'description' => t('Filter by the date the node was posted.'),
      'query type' => 'date',
      'allowed operators' => array(FACETAPI_OPERATOR_AND => TRUE),
      'map callback' => 'facetapi_map_date',
      'min callback' => 'facetapi_get_min_date',
      'max callback' => 'facetapi_get_max_date',
      'dependency plugins' => array('bundle', 'role'),
      'default sorts' => array(
        array('active', SORT_DESC),
        array('indexed', SORT_ASC),
      ),
    );

    $facets['changed'] = array(
      'label' => t('Updated date'),
      'description' => t('Filter by the date the node was last modified.'),
      'query type' => 'date',
      'allowed operators' => array(FACETAPI_OPERATOR_AND => TRUE),
      'map callback' => 'facetapi_map_date',
      'min callback' => 'facetapi_get_min_date',
      'max callback' => 'facetapi_get_max_date',
      'dependency plugins' => array('bundle', 'role'),
      'default sorts' => array(
        array('active', SORT_DESC),
        array('indexed', SORT_ASC),
      ),
    );
  }

  return $facets;
}

/**
 * Implements hook_facetapi_sort_info().
 */
function facetapi_facetapi_sort_info() {
  $sorts = array();

  $sorts['active'] = array(
    'label' => t('Facet active'),
    'callback' => 'facetapi_sort_active',
    'description' => t('Sort by whether the facet is active or not.'),
    'weight' => -50,
  );

  $sorts['count'] = array(
    'label' => t('Count'),
    'callback' => 'facetapi_sort_count',
    'description' => t('Sort by the facet count.'),
    'weight' => -49,
  );

  $sorts['display'] = array(
    'label' => t('Display value'),
    'callback' => 'facetapi_sort_display',
    'description' => t('Sort by the value displayed to the user.'),
    'weight' => -48,
  );

  $sorts['indexed'] = array(
    'label' => t('Indexed value'),
    'callback' => 'facetapi_sort_indexed',
    'description' => t('Sort by the raw value stored in the index.'),
    'weight' => -47,
  );

  return $sorts;
}

/**
 * Implements hook_facetapi_widgets().
 */
function facetapi_facetapi_widgets() {
  return array(
    'facetapi_links' => array(
      'handler' => array(
        'label' => t('Links'),
        'class' => 'FacetapiWidgetLinks',
      ),
    ),
    'facetapi_checkbox_links' => array(
      'handler' => array(
        'label' => t('Links with checkboxes'),
        'class' => 'FacetapiWidgetCheckboxLinks',
      ),
    ),
  );
}

/**
 * Implements hook_facetapi_dependencies().
 */
function facetapi_facetapi_dependencies() {
  return array(
    'bundle' => array(
      'handler' => array(
        'label' => t('Content types'),
        'class' => 'FacetapiDependencyBundle',
      ),
    ),
    'role' => array(
      'handler' => array(
        'label' => t('Roles'),
        'class' => 'FacetapiDependencyRole',
      ),
    ),
  );
}

/**
 * Implements hook_facetapi_empty_behaviors().
 */
function facetapi_facetapi_empty_behaviors() {
  return array(
    'none' => array(
      'handler' => array(
        'label' => t('Do not display facet'),
        'class' => 'FacetapiEmptyBehaviorNone',
      ),
    ),
    'text' => array(
      'handler' => array(
        'label' => t('Display text'),
        'class' => 'FacetapiEmptyBehaviorText',
      ),
    ),
  );
}

////
////
//// Utility functions
////
////

/**
 * Tests whether a single facet is enabled in a given realm.
 *
 * @param $searcher
 *   The machine readable name of the searcher.
 * @param $realm_name
 *   The machine readable name of the realm, pass NULL to test if the facet is
 *   enabled in at least one realm.
 * @param $facet_name
 *   The machine readable name of the facet.
 *
 * @return
 *   A boolean flagging whether the facet is enabled in the passed realm.
 */
function facetapi_facet_enabled($searcher, $realm_name, $facet_name) {
  $enabled_facets = facetapi_get_enabled_facets($searcher, $realm_name, $facet_name);
  return isset($enabled_facets[$facet_name]);
}

/**
 * Builds a facet realm.
 *
 * Converts the facet data into a render array suitable for passing to the
 * drupal_render() function.
 *
 * @param $searcher
 *   The machine readable name of the searcher.
 * @param $realm_name
 *   The machine readable name of the realm.
 *
 * @return
 *   The realm's render array.
 */
function facetapi_build_realm($searcher, $realm_name) {
  $adapter = facetapi_adapter_load($searcher);
  return ($adapter) ? $adapter->buildRealm($realm_name) : array();
}

/**
 * Enables or disables a facet for this page load only.
 *
 * @param $searcher
 *   The machine readable name of the searcher.
 * @param $realm_name
 *   The machine readable name of the realm, pass NULL for all realms.
 * @param $facet_name
 *   The machine readable name of the facet.
 * @param $status
 *   A boolean flagging whether the facet is enabled or disabled.
 * @param $batch_process
 *   A boolean flagging whether batch processing is being performed.  If set to
 *   TRUE, the list of enabled facets won't be rebuild and the active items
 *   won't be re-processed.  Note that these tasks will have to be performed
 *   manually in order for the status to be properly set.
 */
function facetapi_set_facet_status($searcher, $realm_name, $facet_name, $status, $batch_process) {
  // Rebuild static if not batch processing.
  if (!$batch_process) {
    drupal_static('facetapi_get_enabled_facets', array(), TRUE);
  }

  // Pulls the list of enabled facets so we can modify it here.
  facetapi_get_enabled_facets($searcher, $realm_name);
  $enabled_facets = &drupal_static('facetapi_get_enabled_facets', array());

  // Performs the operation by setting or unsetting the facet.
  $cid = $searcher . ':' . (string) $realm_name;
  if ($status && !isset($enabled_facets[$cid][$facet_name])) {
    if ($facet = facetapi_facet_load($facet_name, $searcher)) {
      // Add facet to static, which enables it.
      $enabled_facets[$cid][$facet_name] = $facet;
      // If facet isn't already globally enabled, enable it.
      if (!isset($enabled_facets[$searcher . ':'][$facet_name])) {
        // Ensure sure static is set before modifying it.
        facetapi_get_enabled_facets($searcher, NULL);
        $enabled_facets[$searcher . ':'][$facet_name] = $facet;
      }
    }
  }
  elseif (!$status && isset($enabled_facets[$cid][$facet_name])) {
    // Removes facet to static, which disables it.
    unset($enabled_facets[$cid][$facet_name]);
    // If acting globally, disable facet in all realms.
    if (!$realm_name) {
      foreach (facetapi_get_realm_info() as $realm) {
        // Ensure sure static is set before unsetting the facet.
        facetapi_get_enabled_facets($searcher, $realm['name']);
        unset($enabled_facets[$searcher . ':' . $realm['name']][$facet_name]);
      }
    }
  }
  else {
    return;
  }

  // Re-process the active items since the list of active facets has changed.
  if (!$batch_process && ($adapter = facetapi_adapter_load($searcher))) {
    $adapter->processActiveItems();
  }
}

/**
 * Enables a facet for this page load only.
 *
 * If you are enabling facets in the block realm, you will have to force the
 * delta mapping so that the block can be configured even if it is disabled via
 * the Facet API interface. Otherwise you will not be able to assign the block
 * to a region because it won't be available in admin/structure/block.
 *
 * @param $searcher
 *   The machine readable name of the searcher.
 * @param $realm_name
 *   The machine readable name of the realm, pass NULL for all realms.
 * @param $facet_name
 *   The machine readable name of the facet.
 * @param $batch_process
 *   A boolean flagging whether batch processing is being performed.
 *
 * @see facetapi_set_facet_status()
 * @see hook_facetapi_force_delta_mapping().
 */
function facetapi_set_facet_enabled($searcher, $realm_name, $facet_name, $batch_process = FALSE) {
  return facetapi_set_facet_status($searcher, $realm_name, $facet_name, TRUE, $batch_process);
}

/**
 * Disables a facet for this page load only.
 *
 * @param $searcher
 *   The machine readable name of the searcher.
 * @param $realm_name
 *   The machine readable name of the realm, pass NULL for all realms.
 * @param $facet_name
 *   The machine readable name of the facet.
 * @param $batch_process
 *   A boolean flagging whether batch processing is being performed.
 *
 * @see facetapi_set_facet_status()
 */
function facetapi_set_facet_disabled($searcher, $realm_name, $facet_name, $batch_process = FALSE) {
  return facetapi_set_facet_status($searcher, $realm_name, $facet_name, FALSE, $batch_process);
}

/**
 * Sets the facet status in a given realm, stores settings in the database.
 *
 * @param FacetapiAdapter $adapter
 *   The adapter object.
 * @param array $realm
 *   The realm definition.
 * @param array $facet
 *   The facet definition.
 * @param $status
 *   Flags whether or not the facet is being enabled or disabled.
 * @param $weight
 *   If the realm is sortable, allows the assigning of a weight. Pass FALSE to
 *   maintain the previously stored value.
 * @param $batch_process
 *   A boolean flagging whether batch processing is being performed.  If set to
 *   TRUE, the caches and statics won't be reset.
 *
 * @reutrn boolean
 *   The success of the operation.
 */
function facetapi_save_facet_status(FacetapiAdapter $adapter, array $realm, array $facet, $status, $weight, $batch_process) {
  // Loads the realm settings, sets enabled flag and weight.
  $settings = $adapter->getFacet($facet)->getSettings($realm);
  $settings->enabled = ($status) ? 1 : 0;
  if (FALSE !== $weight) {
    $settings->settings['weight'] = $realm['sortable'] ? $weight : 0;
  }

  // Saves the settings in the database, stores the result.
  // NOTE: CTools export componenet loaded in the getSettings() method.
  $success = (FALSE !== ctools_export_crud_save('facetapi', $settings));

  // Clears caches and statics if we are not batch processing.
  if ($success && !$batch_process) {
    drupal_static('facetapi_get_enabled_facets', array(), TRUE);
    if ('block' == $realm['name']) {
      cache_clear_all(NULL, 'cache_block');
      cache_clear_all('facetapi:delta_map', 'cache');
    }
  }

  return $success;
}

/**
 * Enables a facet in a given realm, stores settings in the database.
 *
 * @param FacetapiAdapter $adapter
 *   The adapter object.
 * @param array $realm
 *   The realm definition.
 * @param array $facet
 *   The facet definition.
 * @param $weight
 *   If the realm is sortable, allows the assigning of a weight. Pass FALSE to
 *   maintain the previously stored value.
 * @param $batch_process
 *   A boolean flagging whether batch processing is being performed.
 *
 * @reutrn boolean
 *   The success of the operation.
 */
function facetapi_save_facet_enabled(FacetapiAdapter $adapter, array $realm, array $facet, $weight = FALSE, $batch_process = FALSE) {
  return facetapi_save_facet_status($adapter, $realm, $facet, TRUE, $weight, $batch_process);
}

/**
 * Disables a facet in a given realm, stores settings in the database.
 *
 * @param FacetapiAdapter $adapter
 *   The adapter object.
 * @param array $realm
 *   The realm definition.
 * @param array $facet
 *   The facet definition.
 * @param $weight
 *   If the realm is sortable, allows the assigning of a weight. Pass FALSE to
 *   maintain the previously stored value.
 * @param $batch_process
 *   A boolean flagging whether batch processing is being performed.
 *
 * @reutrn boolean
 *   The success of the operation.
 */
function facetapi_save_facet_disabled(FacetapiAdapter $adapter, array $realm, array $facet, $weight = FALSE, $batch_process = FALSE) {
  return facetapi_save_facet_status($adapter, $realm, $facet, FALSE, $weight, $batch_process);
}
