<?php

/**
 * @file
 * Tests for the Facet API module.
 */

class FacetapiAdapterTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Facet API functionality',
      'description' => 'Tests the adapter system.',
      'group' => 'Facet API',
    );
  }

  public function setUp() {
    parent::setUp('facetapi_test');
  }

  public function testValidAdapter() {
    // Tests loading of a valid adapter plugin.
    $adapter1 = facetapi_adapter_load('facetapi_test');
    $value = ($adapter1 instanceof FacetapiAdapter);
    $this->assertTrue($value, t('FacetapiAdapter object loaded via facetapi_adapter_load().'));

    // Sets a semaphore to see if singleton pattern works.
    $adapter1->semaphore = 'test';
    $adapter2 = facetapi_adapter_load('facetapi_test');
    $value = (isset($adapter2->semaphore) && 'test' == $adapter2->semaphore);
    $this->assertTrue($value, t('Singleton pattern implemented by facetapi_adapter_load().'));
  }

  public function testInvalidAdapter() {
    $adapter = facetapi_adapter_load('bad_adapter');
    $this->assertFalse($adapter, t('Loading an invalid adapter returns FALSE.'));
  }

  public function testSetParams() {
    // Sets dummy parameters.
    $adapter = facetapi_adapter_load('facetapi_test');
    $url = drupal_parse_url('http://example.com/index.php?q=test&page=1&f[0]=bundle:page');
    $adapter->setParams($url['query']);

    // Ensures that the "q" and "page" variables are stripped.
    $params = $adapter->getParams();
    $this->assertTrue(!isset($params['q']), t('The "q" variable is stripped by FacetapiAdapter::setParams().'));
    $this->assertTrue(!isset($params['page']), t('The "page" variable is stripped by FacetapiAdapter::setParams().'));

    // Tests that the "bundle:page" variable is set.
    $value = (isset($params['f'][0]) && 'bundle:page' == $params['f'][0]);
    $this->assertTrue($value, t('Facet value captured via FacetapiAdapter::setParams().'));
  }
}

class FacetapiUserInterfaceTestCase extends DrupalWebTestCase {
  protected $adminUser;

  public static function getInfo() {
    return array(
      'name' => 'Facet API user interface',
      'description' => 'Tests the UI for Facet API implementations.',
      'group' => 'Facet API',
    );
  }

  public function setUp() {
    parent::setUp('facetapi_test');
    $this->adminUser = $this->drupalCreateUser(array(
      'administer search',
      'access administration pages',
    ));
    $this->drupalLogin($this->adminUser);
  }

  public function testSettingsForms() {
    // Looks for placeholder text in main settings form.
    $this->drupalGet('admin/config/search/facetapi_test');
    $this->assertRaw(FACETAPI_TEST_FORM_TEXT, t('Facet API test setting form exists.'));

    // Searches for "block" link in description.
    $description = t(
      'The <em>Blocks</em> realm displays each facet in a separate <a href="@block-page">block</a>. Users are able to refine their searches in a drill-down fashion.',
      array('@block-page' => url('admin/structure/block', array('query' => array('destination' => 'admin/config/search/facetapi_test/facets/block'))))
    );
    $this->drupalGet('admin/config/search/facetapi_test/facets/block');
    $this->assertRaw($description, t('Facet API test facet form exists.'));
  }

  public function testEnableFacet() {
    $path = 'admin/config/search/facetapi_test/facets/block';

    // @todo Randomize this.
    $values = array();
    $values['enabled_facets[bundle]'] = 'bundle';
    //$values['enabled_facets[author]'] = 0;
    //$values['enabled_facets[language]'] = 0;
    //$values['enabled_facets[created]'] = 0;
    //$values['enabled_facets[changed]'] = 0;
    //$values['block_cache'] = DRUPAL_NO_CACHE;

    // Posts the form, ensures it was successfully submitted.
    $this->drupalGet($path);
    $this->drupalPost($path, $values, t('Save configuration'));
    $this->assertRaw(t('The configuration options have been saved.'), t('Facet form successfully submitted.'));

    // @todo Move this out of the test, include something in the API function
    // that will enable and disable the facet.
    drupal_static('facetapi_get_enabled_facets', array(), TRUE);

    // Tests the status of various facets.
    $value = facetapi_facet_enabled('facetapi_test', 'block', 'bundle');
    $this->assertTrue($value, t('Bundle facet enabled.'));
    $value = facetapi_facet_enabled('facetapi_test', 'block', 'author');
    $this->assertFalse($value, t('Author facet disabled.'));

  }
}
